#!/usr/bin/env python3
"""
Claude Requirements Monitor
Analyzes project requirements and generates compliance reports using Claude API
"""

import os
import json
import requests
from pathlib import Path
from datetime import datetime
from anthropic import Anthropic

class RequirementsMonitor:
    def __init__(self):
        self.anthropic_key = os.getenv('ANTHROPIC_API_KEY')
        self.github_token = os.getenv('GITHUB_TOKEN')
        self.repo = os.getenv('GITHUB_REPOSITORY')
        self.sha = os.getenv('GITHUB_SHA')
        self.event_name = os.getenv('GITHUB_EVENT_NAME')

        if not self.anthropic_key:
            raise ValueError("ANTHROPIC_API_KEY environment variable is required")

        self.client = Anthropic(api_key=self.anthropic_key)

    def read_project_files(self):
        """Read key project files for analysis"""
        files_content = {}

        key_files = [
            'CLAUDE.md',
            'README.md',
            'Roadmap.md',
            'package.json',
            'docker-compose.yml'
        ]

        for file_path in key_files:
            if Path(file_path).exists():
                with open(file_path, 'r', encoding='utf-8') as f:
                    files_content[file_path] = f.read()

        # Also scan src directory structure
        src_path = Path('src')
        if src_path.exists():
            files_content['src_structure'] = self._get_directory_structure('src')

        return files_content

    def _get_directory_structure(self, path, max_depth=3, current_depth=0):
        """Get directory structure as a string"""
        if current_depth >= max_depth:
            return ""

        structure = []
        try:
            for item in sorted(Path(path).iterdir()):
                if item.is_file():
                    structure.append(f"{'  ' * current_depth}üìÑ {item.name}")
                elif item.is_dir() and not item.name.startswith('.'):
                    structure.append(f"{'  ' * current_depth}üìÅ {item.name}/")
                    sub_structure = self._get_directory_structure(
                        item, max_depth, current_depth + 1
                    )
                    if sub_structure:
                        structure.append(sub_structure)
        except PermissionError:
            pass

        return '\n'.join(structure)

    def get_recent_changes(self):
        """Get recent git changes if available"""
        try:
            import subprocess
            result = subprocess.run(
                ['git', 'log', '--oneline', '-5'],
                capture_output=True, text=True
            )
            return result.stdout if result.returncode == 0 else None
        except:
            return None

    def analyze_requirements(self, files_content):
        """Use Claude to analyze requirements compliance"""

        recent_changes = self.get_recent_changes()

        prompt = f"""
You are an AI assistant analyzing a RAG (Retrieval-Augmented Generation) project for requirements compliance.

PROJECT CONTEXT:
- Repository: {self.repo}
- Commit SHA: {self.sha}
- Event: {self.event_name}
- Timestamp: {datetime.now().isoformat()}

PROJECT FILES:
{json.dumps(files_content, indent=2)}

RECENT CHANGES:
{recent_changes if recent_changes else 'No recent changes available'}

ANALYSIS TASKS:
1. Review the project requirements in CLAUDE.md
2. Assess current implementation progress against requirements
3. Identify any gaps or inconsistencies
4. Check for adherence to architecture patterns (microservices, Docker, etc.)
5. Verify technology stack alignment (React, Node.js, LangChain, etc.)
6. Evaluate code organization and structure
7. Suggest improvements or next steps

Please provide a structured analysis in markdown format with:
- Executive Summary
- Requirements Compliance Status
- Architecture Assessment
- Technology Stack Verification
- Gap Analysis
- Recommendations
- Action Items

Focus on actionable insights and specific technical recommendations.
"""

        try:
            response = self.client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=4000,
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )

            return response.content[0].text

        except Exception as e:
            return f"Error analyzing requirements: {str(e)}"

    def generate_report(self, analysis):
        """Generate and save the requirements analysis report"""

        report = f"""# Requirements Analysis Report

**Generated:** {datetime.now().isoformat()}
**Repository:** {self.repo}
**Commit:** {self.sha}
**Trigger:** {self.event_name}

---

{analysis}

---

*This report was automatically generated by the Claude Requirements Monitor.*
"""

        with open('requirements-analysis.md', 'w', encoding='utf-8') as f:
            f.write(report)

        print("‚úÖ Requirements analysis report generated: requirements-analysis.md")
        return report

    def run(self):
        """Main execution function"""
        print("üîç Starting Claude Requirements Monitor...")

        try:
            # Read project files
            print("üìñ Reading project files...")
            files_content = self.read_project_files()

            # Analyze with Claude
            print("ü§ñ Analyzing requirements with Claude...")
            analysis = self.analyze_requirements(files_content)

            # Generate report
            print("üìÑ Generating analysis report...")
            self.generate_report(analysis)

            print("‚úÖ Requirements monitoring completed successfully!")

        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            raise

if __name__ == "__main__":
    monitor = RequirementsMonitor()
    monitor.run()